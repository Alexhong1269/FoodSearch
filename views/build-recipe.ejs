<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Foogle - Build Recipe</title>
	<link rel="stylesheet" type="text/css" href="/style.css">
</head>
<body>
	<div class="main-container">
		<%- include('partials/navigation') %>
		
		<h1>Recipe Builder</h1>
		
		<!-- Recipe form -->
		<form id="recipeForm" action="/save-recipe" method="post">
			<input type="hidden" name="recipeId" value="<%= recipe ? recipe.RecipeID : '' %>">
			
			<label for="title">Title:</label>
			<input type="text" id="title" name="title" value="<%= recipe ? recipe.Title : '' %>" required>
			<br><br>
			
			<label for="description">Description:</label>
			<textarea id="description" name="description" required><%= recipe ? recipe.TextDesc : '' %></textarea>
			<br><br>
			
			<label for="image">Image URL:</label>
			<input type="url" id="image" name="image" value="<%= recipe ? recipe.Img : '' %>">
			<br><br>
			
			<label for="prepTime">Prep Time (minutes):</label>
			<input type="number" id="prepTime" name="prepTime" value="<%= recipe ? recipe.PrepTime : '' %>" min="0">
			<br><br>
			
			<label for="cookTime">Cook Time (minutes):</label>
			<input type="number" id="cookTime" name="cookTime" value="<%= recipe ? recipe.CookTime : '' %>" min="0">
			<br><br>
			
			<label for="additionalTime">Additional Time (minutes):</label>
			<input type="number" id="additionalTime" name="additionalTime" value="<%= recipe ? recipe.AdditionalTime : '' %>" min="0">
			<br><br>
			
			<label for="servings">Servings:</label>
			<input type="number" id="servings" name="servings" value="<%= recipe ? recipe.Servings : '' %>" min="1">
			<br><br>
			
			<label for="yield">Yield:</label>
			<input type="text" id="yield" name="yield" value="<%= recipe ? recipe.Yield : '' %>">
			<br><br>
			
			<div id="ingredientsContainer">
				<button type="button" id="addIngredientBtn">Add Ingredient</button>
				<% if (recipe && ingredients.length > 0) { %>
					<% ingredients.forEach(function(ingredient) { %>
						<div class="ingredientRow">
							<input type="number" class="ingredientQuantity" placeholder="Quantity" value="<%= ingredient.Quantity %>" min="0">
							<select class="ingredientUnit">
								<option value="">-- Select Unit --</option>
								<% ['bushels', 'cups', 'fluid ounces', 'gallons', 'grams', 'kilograms', 'liters', 'milliliters', 'ounces', 'pints', 'pounds', 'quarts', 'tablespoons', 'teaspoons'].forEach(function(unit) { %>
									<option value="<%= unit %>" <%= unit === ingredient.Unit ? 'selected' : '' %>><%= unit %></option>
								<% }); %>
							</select>
							<div class="input-wrapper">
								<input type="text" class="ingredientSearch" placeholder="Search Ingredient" value="<%= ingredient.Name %>" data-id="<%= ingredient.IngredientID %>">
							</div>
							<input type="text" class="ingredientText" placeholder="Describe Ingredient" value="<%= ingredient.IngredientText %>">
							<button type="button" class="removeButton">Remove</button>
						</div>
					<% }); %>
				<% } else { %>
					<div class="ingredientRow">
						<input type="number" class="ingredientQuantity" placeholder="Quantity" min="0">
						<select class="ingredientUnit">
							<option value="">-- Unit --</option>
							<option value="bushels">bushels</option>
							<option value="cups">cups</option>
							<option value="fluid ounces">fluid ounces</option>
							<option value="gallons">gallons</option>
							<option value="grams">grams</option>
							<option value="kilograms">kilograms</option>
							<option value="liters">liters</option>
							<option value="milliliters">milliliters</option>
							<option value="ounces">ounces</option>
							<option value="pints">pints</option>
							<option value="pounds">pounds</option>
							<option value="quarts">quarts</option>
							<option value="tablespoons">tablespoons</option>
							<option value="teaspoons">teaspoons</option>
						</select>
						<div class="input-wrapper">
							<input type="text" class="ingredientSearch" placeholder="Search Ingredient">
						</div>
						<input type="text" class="ingredientText" placeholder="Describe Ingredient">
						<button type="button" class="removeButton">Remove</button>
					</div>
				<% } %>
			</div>
			<br>
			
			<div id="instructionsContainer">
				<button type="button" id="addInstructionBtn">Add Step</button>
				<% if (recipe && instructions.length > 0) { %>
					<% instructions.forEach(function(instruction) { %>
						<div class="instructionRow">
							<textarea class="instructionText" placeholder="Write step description here..."><%= instruction.Instruction %></textarea>
							<button type="button" class="removeInstructionBtn">Remove</button>
						</div>
					<% }); %>
				<% } else { %>
					<div class="instructionRow">
						<textarea class="instructionText" placeholder="Write step description here..."></textarea>
						<button type="button" class="removeInstructionBtn">Remove</button>
					</div>
				<% } %>
			</div>
			<br>
			
			<button type="submit">Save Recipe</button>
		</form>
		
		<!-- JavaScript for dynamic elements and ingredient search -->
		<script>
			document.addEventListener('DOMContentLoaded', function() {
				const container = document.getElementById('ingredientsContainer');
				const instructionsContainer = document.getElementById('instructionsContainer');
				document.getElementById('addIngredientBtn').addEventListener('click', () => addRow(container, 'ingredientRow', true));
				document.getElementById('addInstructionBtn').addEventListener('click', () => addRow(instructionsContainer, 'instructionRow', false));

				// Initialize autocomplete for any existing ingredient searches
				document.querySelectorAll('.ingredientSearch').forEach(input => attachAutocomplete(input));

				// Update remove buttons for existing rows
				updateRemoveButtons(container, 'ingredientRow', 'removeButton');
				updateRemoveButtons(instructionsContainer, 'instructionRow', 'removeInstructionBtn');

				// Initialize existing rows (if any) upon page load
				initializeExistingRows(container, 'ingredientRow', true);
				initializeExistingRows(instructionsContainer, 'instructionRow', false);

				function addRow(parentContainer, rowClass, attachAutoComplete) {
					const newRow = document.createElement('div');
					newRow.innerHTML = document.querySelector('.' + rowClass).innerHTML;
					newRow.className = rowClass;
					parentContainer.appendChild(newRow);
					
					// Clear the values for the new row
					newRow.querySelectorAll('input').forEach(input => {
						if (input.type === 'text' || input.type === 'number') {
							input.value = ''; // Reset text and number inputs
						}
					});
					newRow.querySelectorAll('textarea').forEach(textarea => {
						textarea.value = ''; // Reset textareas
					});

					if (attachAutoComplete && newRow.querySelector('.ingredientSearch')) {
						attachAutocomplete(newRow.querySelector('.ingredientSearch'));
					}

					updateRemoveButtons(parentContainer, rowClass, newRow.querySelector('.removeButton') ? 'removeButton' : 'removeInstructionBtn');
				}


				function attachAutocomplete(searchInput) {
					const resultsContainer = document.createElement('div');
					resultsContainer.className = 'autocomplete-results';
					searchInput.parentNode.appendChild(resultsContainer);
					searchInput.addEventListener('input', () => handleSearch(searchInput, resultsContainer));
					document.addEventListener('click', event => {
						if (!searchInput.contains(event.target) && !resultsContainer.contains(event.target)) {
							resultsContainer.innerHTML = '';
						}
					});
				}

				function handleSearch(searchInput, resultsContainer) {
					const searchText = searchInput.value;
					if (searchText.length > 1) {
						fetch(`/ingredients?search=${encodeURIComponent(searchText)}`)
							.then(response => response.json())
							.then(data => {
								resultsContainer.innerHTML = '';
								data.forEach(ingredient => {
									const div = document.createElement('div');
									div.textContent = ingredient.Name;
									div.setAttribute('data-id', ingredient.IngredientID);
									div.onclick = () => {
										searchInput.value = div.textContent;
										searchInput.setAttribute('data-id', ingredient.IngredientID);
										resultsContainer.innerHTML = '';
										populateFields(searchInput.closest('.ingredientRow'));
									};
									resultsContainer.appendChild(div);
								});
							});
					} else {
						resultsContainer.innerHTML = '';
					}
				}

				function updateRemoveButtons(parentContainer, rowClass, buttonClass) {
					const removeButtons = parentContainer.querySelectorAll('.' + buttonClass);
					removeButtons.forEach(button => {
						button.style.display = parentContainer.querySelectorAll('.' + rowClass).length > 1 ? 'inline' : 'none';
						button.onclick = () => removeRow(button, parentContainer, rowClass, buttonClass);
					});
				}

				function removeRow(button, parentContainer, rowClass, buttonClass) {
					if (parentContainer.querySelectorAll('.' + rowClass).length > 1) {
						button.closest('.' + rowClass).remove();
						updateRemoveButtons(parentContainer, rowClass, buttonClass);
					}
				}

				function populateFields(row) {
					const quantity = row.querySelector('.ingredientQuantity').value;
					const unit = row.querySelector('.ingredientUnit').value;
					const ingredient = row.querySelector('.ingredientSearch').value;
					const combinedInput = row.querySelector('.ingredientText');
					combinedInput.value = `${quantity} ${unit} ${ingredient}`;
				}

				function initializeExistingRows(parentContainer, rowClass, attachAutoComplete) {
					// This function initializes functionality for existing rows when the page is loaded with a recipe
					const existingRows = parentContainer.querySelectorAll('.' + rowClass);
					existingRows.forEach(row => {
						if (attachAutoComplete && row.querySelector('.ingredientSearch')) {
							attachAutocomplete(row.querySelector('.ingredientSearch'));
						}
					});
				}
			});
		</script>
		
		<!-- JavaScript for saving a recipe -->
		<script>
			document.addEventListener('DOMContentLoaded', function() {
				const form = document.getElementById('recipeForm');
				const recipeId = form.querySelector('input[name="recipeId"]').value; // Check if there's an existing recipe ID
				
				form.addEventListener('submit', function(event) {
					event.preventDefault(); // Prevent default form submission
					
					const formData = new FormData();
					formData.append('recipeId', recipeId);
					formData.append('title', document.getElementById('title').value);
					formData.append('description', document.getElementById('description').value);
					formData.append('image', document.getElementById('image').value);
					formData.append('prepTime', document.getElementById('prepTime').value);
					formData.append('cookTime', document.getElementById('cookTime').value);
					formData.append('additionalTime', document.getElementById('additionalTime').value);
					formData.append('servings', document.getElementById('servings').value);
					formData.append('yield', document.getElementById('yield').value);
					
					// Collect Ingredients
					const ingredients = [];
					document.querySelectorAll('.ingredientRow').forEach((row, index) => {
						const ingredientData = {
							ingredientId: row.querySelector('.ingredientSearch').getAttribute('data-id'),
							quantity: row.querySelector('.ingredientQuantity').value,
							unit: row.querySelector('.ingredientUnit').value,
							text: row.querySelector('.ingredientText').value
						};
						ingredients.push(ingredientData);
					});
					formData.append('ingredients', JSON.stringify(ingredients));
					
					// Collect Instructions
					const instructions = [];
					document.querySelectorAll('.instructionRow').forEach((row, index) => {
						const instructionText = row.querySelector('.instructionText').value;
						instructions.push(instructionText);
					});
					formData.append('instructions', JSON.stringify(instructions));
					
					// Determine the correct URL based on whether it's an update or a new creation
					const submitUrl = recipeId ? '/update-recipe' : '/save-recipe';
					
					// Use fetch API to submit the form data
					fetch(submitUrl, {
						method: 'POST',
						body: formData
					})
					.then(response => response.json())
					.then(data => {
						console.log('Success:', data);
						alert('Recipe saved successfully!');
					})
					.catch((error) => {
						console.error('Error:', error);
						alert('Failed to save recipe.');
					});
					alert('Recipe saved successfully!');
					window.location.reload()
					window.location.href='/account';
				});
			});
		</script>
	</div>
</body>
</html>